/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Ice.cpp                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fde-sant <fde-sant@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/16 16:49:01 by fde-sant          #+#    #+#             */
/*   Updated: 2025/04/17 08:02:51 by fde-sant         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "Ice.hpp"
//==============================================================================
//COSTRUCTOR/DESTRUCTOR=========================================================
//==============================================================================
Ice::Ice() : AMateria("ice") 
{
	std::cout << "Costruction of Ice" << std::endl;
}

Ice::Ice(Ice const& copy) : AMateria(copy.type) 
{
	std::cout << "Copy of Ice" << std::endl;
}

Ice::~Ice()
{
	std::cout << "destraction of Ice" << std::endl;
}
//==============================================================================
//OPERATOR======================================================================
//==============================================================================
Ice&	Ice::operator=(Ice const& copy) 
{
	std::cout << "Copy operator of Ice" << std::endl;
	if (&copy != this)
		this->type = copy.type;
	return (*this);
}
//==============================================================================
//METHOD========================================================================
//==============================================================================
std::string	const& Ice::getType() const
{
	return (this->type);
}

Ice*	Ice::clone() const
{
	return (new Ice());
}

void	Ice::use(ICharacter& target)
{
	std::cout << "* shoots an ice bolt at " << target.getName() << "*" << std::endl;
}